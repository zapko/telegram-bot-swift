// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation


/// This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.
///
/// - SeeAlso: <https://core.telegram.org/bots/api#callbackquery>

public struct CallbackQuery: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get {
            return internalJson.object
        }
        set {
            internalJson = JSON(newValue)
        }
    }
    internal var internalJson: JSON

    /// Unique identifier for this query
    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    /// Sender
    public var from: User {
        get { return User(internalJson: internalJson["from"]) }
        set { internalJson["from"] = JSON(newValue.json) }
    }

    /// Optional. Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old
    public var message: Message? {
        get {
            let value = internalJson["message"]
            return value.isNullOrUnknown ? nil : Message(internalJson: value)
        }
        set {
            internalJson["message"] = newValue?.internalJson ?? JSON.null
        }
    }

    /// Optional. Identifier of the message sent via the bot in inline mode, that originated the query.
    public var inlineMessageId: String? {
        get { return internalJson["inline_message_id"].string }
        set { internalJson["inline_message_id"].string = newValue }
    }

    /// Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.
    public var chatInstance: String {
        get { return internalJson["chat_instance"].stringValue }
        set { internalJson["chat_instance"].stringValue = newValue }
    }

    /// Optional. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
    public var data: String? {
        get { return internalJson["data"].string }
        set { internalJson["data"].string = newValue }
    }

    /// Optional. Short name of a Game to be returned, serves as the unique identifier for the game
    public var gameShortName: String? {
        get { return internalJson["game_short_name"].string }
        set { internalJson["game_short_name"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}
