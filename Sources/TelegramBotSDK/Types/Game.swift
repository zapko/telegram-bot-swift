// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation


/// This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
///
/// - SeeAlso: <https://core.telegram.org/bots/api#game>

public struct Game: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get {
            return internalJson.object
        }
        set {
            internalJson = JSON(newValue)
        }
    }
    internal var internalJson: JSON

    /// Title of the game
    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    /// Description of the game
    public var description: String {
        get { return internalJson["description"].stringValue }
        set { internalJson["description"].stringValue = newValue }
    }

    /// Photo that will be displayed in the game message in chats.
    public var photo: [PhotoSize] {
        get { return internalJson["photo"].customArrayValue() }
        set { internalJson["photo"] = JSON.initFrom(newValue) }
    }

    /// Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters.
    public var text: String? {
        get { return internalJson["text"].string }
        set { internalJson["text"].string = newValue }
    }

    /// Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc.
    public var textEntities: [MessageEntity] {
        get { return internalJson["text_entities"].customArrayValue() }
        set { internalJson["text_entities"] = newValue.isEmpty ? JSON.null : JSON.initFrom(newValue) }
    }

    /// Optional. Animation that will be displayed in the game message in chats. Upload via BotFather
    public var animation: Animation? {
        get {
            let value = internalJson["animation"]
            return value.isNullOrUnknown ? nil : Animation(internalJson: value)
        }
        set {
            internalJson["animation"] = newValue?.internalJson ?? JSON.null
        }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}
