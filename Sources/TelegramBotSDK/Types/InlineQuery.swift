// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation


/// This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
///
/// - SeeAlso: <https://core.telegram.org/bots/api#inlinequery>

public struct InlineQuery: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get {
            return internalJson.object
        }
        set {
            internalJson = JSON(newValue)
        }
    }
    internal var internalJson: JSON

    /// Unique identifier for this query
    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    /// Sender
    public var from: User {
        get { return User(internalJson: internalJson["from"]) }
        set { internalJson["from"] = JSON(newValue.json) }
    }

    /// Optional. Sender location, only for bots that request user location
    public var location: Location? {
        get {
            let value = internalJson["location"]
            return value.isNullOrUnknown ? nil : Location(internalJson: value)
        }
        set {
            internalJson["location"] = newValue?.internalJson ?? JSON.null
        }
    }

    /// Text of the query (up to 512 characters)
    public var query: String {
        get { return internalJson["query"].stringValue }
        set { internalJson["query"].stringValue = newValue }
    }

    /// Offset of the results to be returned, can be controlled by the bot
    public var offset: String {
        get { return internalJson["offset"].stringValue }
        set { internalJson["offset"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}
