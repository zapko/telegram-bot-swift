// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation


/// Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
/// If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you must replace its content using input_message_content.
///
/// - SeeAlso: <https://core.telegram.org/bots/api#inlinequeryresultvideo>

public struct InlineQueryResultVideo: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get {
            return internalJson.object
        }
        set {
            internalJson = JSON(newValue)
        }
    }
    internal var internalJson: JSON

    /// Type of the result, must be video
    public var typeString: String {
        get { return internalJson["type"].stringValue }
        set { internalJson["type"].stringValue = newValue }
    }

    /// Unique identifier for this result, 1-64 bytes
    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    /// A valid URL for the embedded video player or video file
    public var videoUrl: String {
        get { return internalJson["video_url"].stringValue }
        set { internalJson["video_url"].stringValue = newValue }
    }

    /// Mime type of the content of video url, “text/html” or “video/mp4”
    public var mimeType: String {
        get { return internalJson["mime_type"].stringValue }
        set { internalJson["mime_type"].stringValue = newValue }
    }

    /// URL of the thumbnail (jpeg only) for the video
    public var thumbUrl: String {
        get { return internalJson["thumb_url"].stringValue }
        set { internalJson["thumb_url"].stringValue = newValue }
    }

    /// Title for the result
    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    /// Optional. Caption of the video to be sent, 0-200 characters
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    /// Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.
    public var parseModeString: String? {
        get { return internalJson["parse_mode"].string }
        set { internalJson["parse_mode"].string = newValue }
    }

    /// Optional. Video width
    public var videoWidth: Int? {
        get { return internalJson["video_width"].int }
        set { internalJson["video_width"].int = newValue }
    }

    /// Optional. Video height
    public var videoHeight: Int? {
        get { return internalJson["video_height"].int }
        set { internalJson["video_height"].int = newValue }
    }

    /// Optional. Video duration in seconds
    public var videoDuration: Int? {
        get { return internalJson["video_duration"].int }
        set { internalJson["video_duration"].int = newValue }
    }

    /// Optional. Short description of the result
    public var description: String? {
        get { return internalJson["description"].string }
        set { internalJson["description"].string = newValue }
    }

    /// Optional. Inline keyboard attached to the message
    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    /// Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).
    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}
